name: Packer Build

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  packer-build:
    if: github.event.pull_request.merged == true
    name: Packer build job
    runs-on: ubuntu-latest
    env:
      NODE_ENV: workflow
      GITHUB_WORKSPACE: ${{ github.workspace }}

    services:
      postgresql:
        image: postgres:13 # Use the PostgreSQL Docker image
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }} # Replace with your PostgreSQL username
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} # Replace with your PostgreSQL password
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }} # Replace with your PostgreSQL database name
        ports:
          - 5432:5432 # Map container port 5432 to host port 5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Use the desired Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test # Replace with your test command

      - name: Delete Node Modules
        run: rm -rf node_modules
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # v4.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Zip web application
        run: |
          cd ${{ github.workspace }}
          zip -r webapp.zip . -x ".git/*" 
          ls -l
        working-directory: ${{ github.workspace }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      - name: Initialize Packer
        run: packer init aws-debian.pkr.hcl

      - name: Packer build
        run: |
          packer build -var 'source_ami=${{ vars.SOURCE_AMI }}' \
                      -var 'subnet_id=${{ vars.SUBNET_ID }}' \
                      -var 'instance_type=${{ vars.INSTANCE_TYPE }}' \
                      -var 'region=${{ vars.REGION }}' \
                      -var 'block_device_name=${{ vars.BLOCK_DEVICE_NAME }}' \
                      -var 'volume_size=${{ vars.VOLUME_SIZE }}' \
                      -var 'volume_type=${{ vars.VOLUME_TYPE }}' \
                      -var 'zip_file_name=${{ github.workspace }}/webapp.zip' \
                      aws-debian.pkr.hcl
        working-directory: ${{ github.workspace }}
      
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      
      # Additional Steps for Launch Template and Auto Scaling Group
      - name: Copy AMI ID to Outputs
        run: echo "::set-output name=ami_id::$(cat ami_id.txt)"

      - name: Fetch Launch Template ID
        run: |
          launch_template_id=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          echo "::set-output name=launch_template_id::$launch_template_id"

      - name: Fetch Auto Scaling Group Name
        run: |
          auto_scaling_group_name=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
          echo "::set-output name=auto_scaling_group_name::$auto_scaling_group_name"

      - name: Create New Launch Template Version
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-id ${{ steps.fetch-launch-template-id.outputs.launch_template_id }} \
            --version-description "New version with AMI ${{ steps.packer-build.outputs.ami_id }}"

      - name: Update Auto Scaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ steps.fetch-auto-scaling-group-name.outputs.auto_scaling_group_name }} \
            --launch-template "Version=${{ steps.packer-build.outputs.ami_id }}"

      - name: Trigger Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ steps.fetch-auto-scaling-group-name.outputs.auto_scaling_group_name }} \
            --strategy Rolling
