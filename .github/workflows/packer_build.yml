name: Packer Build and Launch Template Auto Scaling Upgrades

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  packer-build:
    if: github.event.pull_request.merged == true
    name: Packer build job
    runs-on: ubuntu-latest
    env:
      NODE_ENV: workflow
      GITHUB_WORKSPACE: ${{ github.workspace }}

    services:
      postgresql:
        image: postgres:13 # Use the PostgreSQL Docker image
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }} # Replace with your PostgreSQL username
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} # Replace with your PostgreSQL password
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }} # Replace with your PostgreSQL database name
        ports:
          - 5432:5432 # Map container port 5432 to host port 5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Use the desired Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test # Replace with your test command

      - name: Delete Node Modules
        run: rm -rf node_modules
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # v4.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Zip web application
        run: |
          cd ${{ github.workspace }}
          zip -r webapp.zip . -x ".git/*" 
          ls -l
        working-directory: ${{ github.workspace }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      - name: Initialize Packer
        run: packer init aws-debian.pkr.hcl

      - name: Packer build
        run: |
          packer build -var 'source_ami=${{ vars.SOURCE_AMI }}' \
                      -var 'subnet_id=${{ vars.SUBNET_ID }}' \
                      -var 'instance_type=${{ vars.INSTANCE_TYPE }}' \
                      -var 'region=${{ vars.REGION }}' \
                      -var 'block_device_name=${{ vars.BLOCK_DEVICE_NAME }}' \
                      -var 'volume_size=${{ vars.VOLUME_SIZE }}' \
                      -var 'volume_type=${{ vars.VOLUME_TYPE }}' \
                      -var 'zip_file_name=${{ github.workspace }}/webapp.zip' \
                      aws-debian.pkr.hcl
        working-directory: ${{ github.workspace }}

  launch-template-auto-scaling:
    if: github.event.pull_request.merged == true
    name: Update Launch Template and Auto Scaling
    runs-on: ubuntu-latest

    steps:
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      
      - name: Copy AMI ID to Github Env
        run: |
          AMI_ID=$(aws ec2 describe-images --owners 912764834865 --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text 2>&1)

          # Check if the command was successful
          if [ $? -eq 0 ]; then
            echo "ami_id=$AMI_ID" >> "$GITHUB_ENV"
          else
            # Print the error message and exit with a non-zero status
            echo "Error: $AMI_ID"
            exit 1
          fi

      - name: Fetch Launch Template ID
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          echo "launch_template_id=$LAUNCH_TEMPLATE_ID" >> "$GITHUB_ENV"
      
      - name: Fetch Auto Scaling Group Name
        run: |
          AUTO_SCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
          echo "auto_scaling_group_name=$AUTO_SCALING_GROUP_NAME" >> "$GITHUB_ENV"

      - name: Create New Launch Template Version
        run: |
          aws ec2 create-launch-template-version --launch-template-id $launch_template_id --source-version 1 --launch-template-data "ImageId=$ami_id" --version-description "New Version"
      
      - name: Fetch Latest Launch Template Version
        run: |
          latest_version=$(aws ec2 describe-launch-template-versions --launch-template-id $launch_template_id --versions '$Latest' --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' --output text)
          echo "LATEST_VERSION=$latest_version" >> "$GITHUB_ENV"
      
      - name: Update Auto Scaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $auto_scaling_group_name \
            --launch-template "LaunchTemplateId=$launch_template_id,Version=$LATEST_VERSION"
      
      - name: Trigger Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $auto_scaling_group_name
          
          while [[ "$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $auto_scaling_group_name --query 'InstanceRefreshes[0].Status' --output text)" != "Successful" ]];
          do
            echo "Waiting for instance refresh to complete..."
            sleep 30
          done
      

      
      
      