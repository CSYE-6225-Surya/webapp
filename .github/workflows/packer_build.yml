name: Packer Build

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  packer-build:
    name: Packer build job
    runs-on: ubuntu-latest

    services:
      postgresql:
        image: postgres:13 # Use the PostgreSQL Docker image
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }} # Replace with your PostgreSQL username
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} # Replace with your PostgreSQL password
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }} # Replace with your PostgreSQL database name
        ports:
          - 5432:5432 # Map container port 5432 to host port 5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Use the desired Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run database migrations
        run: npm run migrate # Replace with your actual migration command

      - name: Run tests
        run: npm test # Replace with your test command

      - name: Delete Node Modules
        run: rm -rf node_modules
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # v4.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Zip web application
        run: |
          cd ${{ github.workspace }}
          zip -r webapp.zip . -x ".git/*" 
          ls -l
        working-directory: ${{ github.workspace }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      - name: Initialize Packer
        run: packer init aws-debian.pkr.hcl

      - name: Packer build
        run: |
          packer build -var 'source_ami=${{ vars.SOURCE_AMI }}' \
                      -var 'subnet_id=${{ vars.SUBNET_ID }}' \
                      -var 'instance_type=${{ vars.INSTANCE_TYPE }}' \
                      -var 'region=${{ vars.REGION }}' \
                      -var 'block_device_name=${{ vars.BLOCK_DEVICE_NAME }}' \
                      -var 'volume_size=${{ vars.VOLUME_SIZE }}' \
                      -var 'volume_type=${{ vars.VOLUME_TYPE }}' \
                      -var 'zip_file_name=${{ github.workspace }}/webapp.zip' \
                      aws-debian.pkr.hcl
        working-directory: ${{ github.workspace }}
